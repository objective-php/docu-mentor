#!/usr/bin/env php
<?php

$options = [
    'force'   => false,
    'init'    => false,
    'config'  => false,
    'verbose' => false,
];

$args = [];

foreach ($argv as $i => $arg) {
    if ($i === 0) {
        continue;
    } else {
        if (preg_match('/^(-+)([a-z]+)$/', $arg, $match)) {
            //$match[0];  -iv --config
            //$match[1];  -   --
            //$match[2];  iv  config
            switch ($match[1]) {
                case '--':
                    $args[] = $match[2];
                    break;
                case '-':
                    foreach (str_split($match[2]) as $char) {
                        $args[] = $char;
                    }
                    break;
                default:
                    fail('Argument badly writted : ' . $arg);
            }
        } else {
            fail('Argument badly writted : ' . $arg);
        }
    }
}

foreach ($args as $arg) {
    switch ($arg) {
        case 'h':
        case 'help':
        case 'u':
        case 'usage':
            echo getHelpText();
            exit(0);
        case 'v':
        case 'verbose':
            $options['verbose'] = true;
            break;
        case 'i':
        case 'init':
            $options['init'] = true;
            break;
        case 'c':
        case 'config':
            $options['config'] = true;
            break;
        case 'force':
            $options['force'] = true;
            break;
        default:
            fail('Argument unkwown : ' . $arg);
    }
}
echo 'Script starting' . "\n\n";
requireAutoloader();

echo 'Autoloader required' . "\n\n";
$cwd = getcwd();

echo 'The cwd is : ' . $cwd . "\n\n";
$docuMentor = new \ObjectivePHP\DocuMentor\DocuMentor();

echo 'Documentor created' . "\n\n";

if ($options['init']) {
    if ( $docuMentor->initDocumentation($cwd . '/docs', $options['force'])){
        echo "\n\e[32mSUCCESS:\e[0m Documentation initialised\n\n";
        echo '
    docs/  01.quick-start.md
        02.detailed-usage.md
        03.config-directives.md 
        index.md  
';
    } else {
        echo "\n\e[31mERROR:\e[0m Documentation initialisation aborted\n\n";
    }
}
if ($options['config']) {
    if ( $docuMentor->collectDirectiveConfigs($cwd . '/src/Config', $cwd . '/docs')){
        echo "\n\e[32mSUCCESS:\e[0m Config documentation generated\n\n";
    } else {
        echo "\n\e[31mERROR:\e[0m Config documentation aborted\n\n";
    }
}

if ($options['verbose']) {
    foreach ($docuMentor->getReport() as $exception) {
        echo "\n\e[31m ERROR: \e[0m";
        echo $exception->getMessage();
    }
}

/**
 * Get help and usage info
 *
 * @return string
 */
function getHelpText()
{
    return "
Docu-mentor - Objective-php's doc generator 

Usage: docu [OPTIONS] 

    -i, --init    Generate the docs/.md files 
 
    -c, --configs Generate or update the config-directive doc file

    -v, --verbose Shows the errors

    -f, --force   Overwrite the files

    -h, --help    Show this message
 

Examples:

    Init a documentation:

        docu -i

    Init the whole documentation:

        docu -ic

    Rewrite the config doc:

        docu -c --force

 

Full documentation can be found at http://objective-php.org/
";
}

/**
 * @param string $message Error message
 */
function fail($message)
{
    fwrite(STDERR, "\033[31m ERROR: \033[0m $message  \n\n Use: \ndocu --help      to find help \n");
    exit(1);
}

function requireAutoloader()
{
    $autoloadPaths = [
        // Local package usage
        __DIR__ . '/../vendor/autoload.php',
        // Package was included as a library
        __DIR__ . '/../../../autoload.php',
    ];
    foreach ($autoloadPaths as $path) {
        if (file_exists($path)) {
            require_once $path;
            break;
        }
    }
}